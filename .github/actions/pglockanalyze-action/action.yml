name: "pglockanalyze CI Action (composite)"
description: >
  Runs pglockanalyze against PostgreSQL migration *files* listed in
  `input_files`, then posts inline PR annotations describing the locks
  each statement acquires.

branding:
  icon: "unlock"
  color: "blue"

########################
#        inputs        #
########################
inputs:
  db-host:
    description: "PostgreSQL host"
    required: false
    default: "localhost"

  db-port:
    description: "PostgreSQL port"
    required: false
    default: "5432"

  db-name:
    description: "Database name"
    required: false
    default: "pgladb"

  db-user:
    description: "Database user"
    required: false
    default: "pglauser"

  db-password:
    description: "Database password"
    required: false
    default: "pglapass"

  input_files:           # ðŸ‘ˆ ONLY input now
    description: |
      New-line separated list of migration **file paths** (within the repo)
      to analyse. Each file is processed individually.
    required: true

  cli-flags:
    description: "Additional pglockanalyze CLI flags (optional)"
    required: false

########################
#        runner        #
########################
runs:
  using: "composite"

  steps:
    - name: Install Rust toolchain
      shell: bash
      run: |
        if ! command -v cargo >/dev/null; then
          curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path
          echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"
        fi

    - name: Install pglockanalyze
      shell: bash
      run: |
        cargo install pglockanalyze --git https://github.com/agis/pglockanalyze --branch main --locked --force

    - name: Ensure jq is available
      shell: bash
      run: |
        if ! command -v jq >/dev/null; then
          sudo apt-get update -y
          sudo apt-get install -y jq
        fi

    - name: Run pglockanalyze and post annotations
      shell: bash
      env:
        DB_HOST:      ${{ inputs['db-host'] }}
        DB_PORT:      ${{ inputs['db-port'] }}
        DB_NAME:      ${{ inputs['db-name'] }}
        DB_USER:      ${{ inputs['db-user'] }}
        DB_PASS:      ${{ inputs['db-password'] }}
        FILE_INPUTS:  ${{ inputs.input_files }}
        CLI_FLAGS:    ${{ inputs['cli-flags'] }}
      run: |
        "${{ github.action_path }}/scripts/run.sh"
