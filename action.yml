name: "pglockanalyze CI Action (composite)"
description: >
  Runs pglockanalyze against PostgreSQL schema migrations provided by the
  caller and posts inline PR comments describing the locks each statement
  acquires. Requires a PostgreSQL service container to be declared in the
  workflow.

branding:
  icon: "unlock"
  color: "blue"

inputs:
  db-host:
    description: "PostgreSQL host"
    required: false
    default: "localhost"
  db-port:
    description: "PostgreSQL port"
    required: false
    default: "5432"
  db-name:
    description: "Database name"
    required: false
    default: "pgladb"
  db-user:
    description: "Database user"
    required: false
    default: "pglauser"
  db-password:
    description: "Database password"
    required: false
    default: "pglapass"
  migrations:
    description: |
      New‑line separated list containing **either** relative file paths
      inside the repository **or** raw DDL statements to analyse.
    required: true
  cli-flags:
    description: "Additional pglockanalyze CLI flags (optional)"
    required: false
  github-token:
    description: "GitHub token with `pull‑requests:write` permission"
    required: false
    default: "${{ github.token }}"

runs:
  using: "composite"
  steps:
    - name: Install Rust toolchain
      shell: bash
      run: |
        if ! command -v cargo >/dev/null; then
          curl https://sh.rustup.rs -sSf | sh -s -- -y --no-modify-path
          echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"
        fi

    - name: Install pglockanalyze
      shell: bash
      run: |
        cargo install pglockanalyze --locked --force

    - name: Ensure jq & gh are available
      shell: bash
      run: |
        if ! command -v jq >/dev/null; then
          sudo apt-get update -y
          sudo apt-get install -y jq
        fi
        if ! command -v gh >/dev/null; then
          sudo apt-get update -y
          sudo apt-get install -y gh
        fi

    - name: Run pglockanalyze and post comments
      shell: bash
      env:
        DB_HOST:      ${{ inputs.db-host }}
        DB_PORT:      ${{ inputs.db-port }}
        DB_NAME:      ${{ inputs.db-name }}
        DB_USER:      ${{ inputs.db-user }}
        DB_PASS:      ${{ inputs.db-password }}
        INLINE_DDL:   ${{ inputs.input_inline }}
        FILE_INPUTS:  ${{ inputs.input_files }}
        CLI_FLAGS:    ${{ inputs.cli-flags }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
      run: |
        "${{ github.action_path }}/scripts/run.sh"
